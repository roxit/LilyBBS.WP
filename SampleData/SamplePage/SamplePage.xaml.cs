//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SamplePage
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SamplePage { }
#else

	public class SamplePage : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public SamplePage()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/LilyBBS;component/SampleData/SamplePage/SamplePage.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private Items _Items = new Items();

		public Items Items
		{
			get
			{
				return this._Items;
			}
		}

		private string _Board = string.Empty;

		public string Board
		{
			get
			{
				return this._Board;
			}

			set
			{
				if (this._Board != value)
				{
					this._Board = value;
					this.OnPropertyChanged("Board");
				}
			}
		}

		private string _BoardText = string.Empty;

		public string BoardText
		{
			get
			{
				return this._BoardText;
			}

			set
			{
				if (this._BoardText != value)
				{
					this._BoardText = value;
					this.OnPropertyChanged("BoardText");
				}
			}
		}
	}

	public class ItemsItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Board = string.Empty;

		public string Board
		{
			get
			{
				return this._Board;
			}

			set
			{
				if (this._Board != value)
				{
					this._Board = value;
					this.OnPropertyChanged("Board");
				}
			}
		}

		private string _Author = string.Empty;

		public string Author
		{
			get
			{
				return this._Author;
			}

			set
			{
				if (this._Author != value)
				{
					this._Author = value;
					this.OnPropertyChanged("Author");
				}
			}
		}

		private double _CountText = 0;

		public double CountText
		{
			get
			{
				return this._CountText;
			}

			set
			{
				if (this._CountText != value)
				{
					this._CountText = value;
					this.OnPropertyChanged("CountText");
				}
			}
		}

		private string _Title = string.Empty;

		public string Title
		{
			get
			{
				return this._Title;
			}

			set
			{
				if (this._Title != value)
				{
					this._Title = value;
					this.OnPropertyChanged("Title");
				}
			}
		}

		private string _Date = string.Empty;

		public string Date
		{
			get
			{
				return this._Date;
			}

			set
			{
				if (this._Date != value)
				{
					this._Date = value;
					this.OnPropertyChanged("Date");
				}
			}
		}
	}

	public class Items : System.Collections.ObjectModel.ObservableCollection<ItemsItem>
	{ 
	}
#endif
}
